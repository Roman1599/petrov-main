{
  "uid" : "19cf3f4b37488de3",
  "name" : "Post random information",
  "fullName" : "tests.feature_profile_test.TestProfileFeature#test_post",
  "historyId" : "028bb0f23aa13d60158934f7f2b84f0f",
  "time" : {
    "start" : 1706279750335,
    "stop" : 1706279756425,
    "duration" : 6090
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=112.0.5615.165)",
  "statusTrace" : "self = <feature_profile_test.TestProfileFeature object at 0x7f24cd330aa0>\n\n    @allure.title(\"Post random information\")\n    @allure.severity(\"Critical\")\n    def test_post(self):\n        self.login_page.open()\n        self.login_page.enter_login(self.data.LOGIN)\n        self.login_page.enter_password(self.data.PASSWORD)\n        self.login_page.click_submit_button()\n        self.dashboard_page.is_opened()\n        self.dashboard_page.click_buzz()\n        self.buzz_page.is_opened()\n>       self.buzz_page.click_post_area(f\"Test text {random.randint(1, 100)}\")\n\ntests/feature_profile_test.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/buzz_page.py:34: in click_post_area\n    post_area_field.send_keys(new_value)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:230: in send_keys\n    self._execute(\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f24cd336de0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=112.0.5615.165)\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "setup",
    "time" : {
      "start" : 1706279750334,
      "stop" : 1706279750334,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1706279749525,
      "stop" : 1706279750334,
      "duration" : 809
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=112.0.5615.165)",
    "statusTrace" : "self = <feature_profile_test.TestProfileFeature object at 0x7f24cd330aa0>\n\n    @allure.title(\"Post random information\")\n    @allure.severity(\"Critical\")\n    def test_post(self):\n        self.login_page.open()\n        self.login_page.enter_login(self.data.LOGIN)\n        self.login_page.enter_password(self.data.PASSWORD)\n        self.login_page.click_submit_button()\n        self.dashboard_page.is_opened()\n        self.dashboard_page.click_buzz()\n        self.buzz_page.is_opened()\n>       self.buzz_page.click_post_area(f\"Test text {random.randint(1, 100)}\")\n\ntests/feature_profile_test.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/buzz_page.py:34: in click_post_area\n    post_area_field.send_keys(new_value)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:230: in send_keys\n    self._execute(\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f24cd336de0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=112.0.5615.165)\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException",
    "steps" : [ {
      "name" : "Open https://opensource-demo.orangehrmlive.com/web/index.php/auth/login page",
      "time" : {
        "start" : 1706279750335,
        "stop" : 1706279751766,
        "duration" : 1431
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter login",
      "time" : {
        "start" : 1706279751766,
        "stop" : 1706279752820,
        "duration" : 1054
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "login",
        "value" : "'Admin'"
      } ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter password",
      "time" : {
        "start" : 1706279752820,
        "stop" : 1706279752883,
        "duration" : 63
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "password",
        "value" : "'admin123'"
      } ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Click submit",
      "time" : {
        "start" : 1706279752883,
        "stop" : 1706279752928,
        "duration" : 45
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Open https://opensource-demo.orangehrmlive.com/web/index.php/dashboard/index is opened",
      "time" : {
        "start" : 1706279752928,
        "stop" : 1706279753888,
        "duration" : 960
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Click on 'Buzz' link",
      "time" : {
        "start" : 1706279753888,
        "stop" : 1706279755300,
        "duration" : 1412
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Open https://opensource-demo.orangehrmlive.com/web/index.php/buzz/viewBuzz is opened",
      "time" : {
        "start" : 1706279755300,
        "stop" : 1706279755302,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Click on Post area",
      "time" : {
        "start" : 1706279755302,
        "stop" : 1706279756424,
        "duration" : 1122
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=112.0.5615.165)\n\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/workspace/pages/buzz_page.py\", line 34, in click_post_area\n    post_area_field.send_keys(new_value)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 230, in send_keys\n    self._execute(\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "new_value",
        "value" : "'Test text 21'"
      } ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1706279756473,
      "stop" : 1706279756530,
      "duration" : 57
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Profile Functionaloty"
  }, {
    "name" : "severity",
    "value" : "Critical"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "feature_profile_test"
  }, {
    "name" : "subSuite",
    "value" : "TestProfileFeature"
  }, {
    "name" : "host",
    "value" : "85bcb56e889e"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.feature_profile_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 49,
        "skipped" : 0,
        "passed" : 304,
        "unknown" : 0,
        "total" : 353
      },
      "items" : [ {
        "uid" : "d8b9a71c973def38",
        "status" : "passed",
        "time" : {
          "start" : 1706276125045,
          "stop" : 1706276133347,
          "duration" : 8302
        }
      }, {
        "uid" : "1145de624b327a79",
        "status" : "passed",
        "time" : {
          "start" : 1706273206928,
          "stop" : 1706273215683,
          "duration" : 8755
        }
      }, {
        "uid" : "92529b0dcd4289e3",
        "status" : "passed",
        "time" : {
          "start" : 1706204139373,
          "stop" : 1706204147795,
          "duration" : 8422
        }
      }, {
        "uid" : "94861dc7c8d9bfd7",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception",
        "time" : {
          "start" : 1706200933004,
          "stop" : 1706200940212,
          "duration" : 7208
        }
      }, {
        "uid" : "8cdb4548869833c",
        "status" : "passed",
        "time" : {
          "start" : 1706196960018,
          "stop" : 1706196968418,
          "duration" : 8400
        }
      }, {
        "uid" : "26652b6f69ae40e3",
        "status" : "passed",
        "time" : {
          "start" : 1706193424175,
          "stop" : 1706193433295,
          "duration" : 9120
        }
      }, {
        "uid" : "4224da1afba201d1",
        "status" : "passed",
        "time" : {
          "start" : 1706189736650,
          "stop" : 1706189745846,
          "duration" : 9196
        }
      }, {
        "uid" : "c7165b63b25c850a",
        "status" : "passed",
        "time" : {
          "start" : 1706187115793,
          "stop" : 1706187124297,
          "duration" : 8504
        }
      }, {
        "uid" : "27041ff6fa7d0276",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception",
        "time" : {
          "start" : 1706117750112,
          "stop" : 1706117757236,
          "duration" : 7124
        }
      }, {
        "uid" : "6857aab6f6f7ba0c",
        "status" : "passed",
        "time" : {
          "start" : 1706114456202,
          "stop" : 1706114465719,
          "duration" : 9517
        }
      }, {
        "uid" : "96f1b3373b7a2ab3",
        "status" : "passed",
        "time" : {
          "start" : 1706110558340,
          "stop" : 1706110566593,
          "duration" : 8253
        }
      }, {
        "uid" : "726cff039d75be81",
        "status" : "passed",
        "time" : {
          "start" : 1706107035372,
          "stop" : 1706107043751,
          "duration" : 8379
        }
      }, {
        "uid" : "3d4b44d87aaea79d",
        "status" : "passed",
        "time" : {
          "start" : 1706103341024,
          "stop" : 1706103349355,
          "duration" : 8331
        }
      }, {
        "uid" : "9e9c2a8f86bed713",
        "status" : "passed",
        "time" : {
          "start" : 1706100733495,
          "stop" : 1706100742923,
          "duration" : 9428
        }
      }, {
        "uid" : "cef8492db06d2c19",
        "status" : "passed",
        "time" : {
          "start" : 1706031354699,
          "stop" : 1706031363056,
          "duration" : 8357
        }
      }, {
        "uid" : "aabf0aa5d181580e",
        "status" : "passed",
        "time" : {
          "start" : 1706028102709,
          "stop" : 1706028110953,
          "duration" : 8244
        }
      }, {
        "uid" : "79296d7385253bae",
        "status" : "passed",
        "time" : {
          "start" : 1706024200348,
          "stop" : 1706024208810,
          "duration" : 8462
        }
      }, {
        "uid" : "828250fbf9fddf",
        "status" : "passed",
        "time" : {
          "start" : 1706020633823,
          "stop" : 1706020642301,
          "duration" : 8478
        }
      }, {
        "uid" : "973e85530c165aef",
        "status" : "passed",
        "time" : {
          "start" : 1706016943674,
          "stop" : 1706016952609,
          "duration" : 8935
        }
      }, {
        "uid" : "c8b88bd23b095dee",
        "status" : "passed",
        "time" : {
          "start" : 1706014325817,
          "stop" : 1706014334781,
          "duration" : 8964
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "19cf3f4b37488de3.json",
  "parameterValues" : [ ]
}